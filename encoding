% task assignment

{assign(C,T) : vehicle(C)} = 1 :- task(T).

 share(T1,T2)  :- assign(C,T1), assign(C,T2), T1 < T2.
{order(T1,T2)} :- share(T1,T2).
 order(T2,T1)  :- share(T1,T2), not order(T1,T2).

check(T1,T2) :- tasks(T1,T2), not order(T1,T2).
check(T1,T2) :- tasks(T1,T2), check(T1).
check(T2)    :- task(T2), check(T1,T2) : tasks(T1,T2).
:- task(T2), not check(T2).

% task completion

pass(C,T,s(1),V,D,N) :- assign(C,T), at(C,V,N), halt(V,D), task(T,M),
                        subtask(T,s(1),V), not wait(T,N), N < M.
pass(C,T,s(I),V,D,N) :- assign(C,T), at(C,V,N), halt(V,D), task(T,M),
                        subtask(T,s(I),V), done(T,s(I-1),N), N < M.

done(T,S,N+D) :- pass(C,T,S,V,D,N), task(T,M), not move(C,N), N+D <= M.
done(T,S,N+1) :- done(T,S,N), not task(T,N).
:- task(T,M), subtask(T,S), not done(T,S,M).

wait(T2,N) :- order(T1,T2), task(T1,M1), task(T2,M2), time(N),
              subtask(T1,s(I)), not subtask(T1,s(I+1)),
	      not done(T1,s(I),N), N < M1, N < M2.

% vehicle routing

at(C,V,0)    :- vehicle(C,V), time(0).
at(C,V2,N+D) :- move(C,V1,V2,N), edge(V1,V2,D).
at(C,V,N+1)  :- at(C,V,N), park(V,D), time(N+1), not move(C,N).
at(C,V,N+1)  :- pass(C,T,S,V,D,N), not done(T,S,N), not move(C,N).
:- node(V), time(N), #count{C : at(C,V,N)} > 1.
:- vehicle(C), time(N), #count{V : at(C,V,N)} > 1.

{move(C,V1,V2,N) : edge(V1,V2,D), time(N+D)} < 2 :- vehicle(C), time(N).
 move(C,N) :- move(C,V1,V2,N).
:- move(C,V1,V2,N), not at(C,V1,N).

moving(C,V1,V2,N+1) :- move(C,V1,V2,N).
moving(C,V1,V2,N+1) :- moving(C,V1,V2,N), time(N+1), not at(C,V2,N).
moving(V1,V2,N)     :- moving(C,V1,V2,N).
:- moving(V1,V2,N), moving(V2,V1,N).

free(C,D,N)   :- at(C,V,N), stay(V,D), not at(C,V,N-1).
free(C,D,N+D) :- free(C,D,N), time(N+D), not move(C,N).
free(C,N)     :- free(C,D,N).
free(C,N)     :- vehicle(C), time(N), not at(C,V,N) : stay(V,D).
:- move(C,N), not free(C,N).

% objective criteria

used(C,N)   :- at(C,V,N).
used(C,N-1) :- used(C,N), 0 < N.
:~ used(C,N). [1@4,N]
:~ used(C,N). [1@3,C,N]

move(C,V1,V2) :- move(C,V1,V2,N).

mark(C,V1,V) :- less(V1,V2,V), move(C,V2,V).
mark(C,V1,V) :- less(V1,V2,V), mark(C,V2,V).
:~ mark(C1,V1,V), move(C2,V1,V), C1 < C2. [1@2,C1,C2,V]
:~ move(C1,V1,V), mark(C2,V1,V), C1 < C2. [1@2,C1,C2,V]

same(C1,C2,V1,V2) :- move(C1,V1,V2), move(C2,V1,V2), C1 < C2.
:~ move(C1,V1,V2), move(C2,V2,V1), C1 < C2, V1 < V2. [1@1,C1,C2,V1,V2]
:~ move(C1,V2,V1), move(C2,V1,V2), C1 < C2, V1 < V2. [1@1,C1,C2,V1,V2]
:~ same(C1,C2,V1,V2), V1 < V2.                       [1@1,C1,C2,V1,V2]
:~ same(C1,C2,V2,V1), V1 < V2.                       [1@1,C1,C2,V1,V2]
:~ same(C1,C2,V1,V2), move(C1,V2,V1), V1 < V2.       [1@1,C1,C2,V2,V1]
:~ same(C1,C2,V1,V2), move(C2,V2,V1), V1 < V2.       [1@1,C1,C2,V2,V1]
:~ same(C1,C2,V2,V1), move(C1,V1,V2), V1 < V2.       [1@1,C1,C2,V2,V1]
:~ same(C1,C2,V2,V1), move(C2,V1,V2), V1 < V2.       [1@1,C1,C2,V2,V1]
:~ same(C1,C2,V1,V2), same(C1,C2,V2,V1), V1 < V2.    [2@1,C1,C2,V1,V2]

:~ P = 1..4. [0@P]

% display plan

#show assign/2.
#show order/2.
#show move/4.
#show at/3.
